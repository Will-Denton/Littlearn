{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as Blockly from 'blockly/core';\nimport './index.css';\nimport { blocks } from '../blockly/blocks/text'; // Import your blocks\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { load } from '../blockly/serialization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst toolboxXML = `\n  <xml id=\"toolbox\" style=\"display: none\">\n    <block type=\"add_text\"></block>\n    <!-- Add other custom blocks to the toolbox as needed -->\n  </xml>\n`;\nconst BlocklyComponent = () => {\n  _s();\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.defineBlocksWithJsonArray(blocks); // Use your blocks array\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolboxXML\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = javascriptGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      // Add your code execution logic here\n    };\n\n    // Load the initial state from storage and run the code.\n    load(workspace);\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        height: '480px',\n        width: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: toolboxXML\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"generatedCode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(BlocklyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BlocklyComponent;\nexport default BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["React","useEffect","Blockly","blocks","forBlock","javascriptGenerator","load","jsxDEV","_jsxDEV","toolboxXML","BlocklyComponent","_s","defineBlocksWithJsonArray","Object","assign","workspace","inject","toolbox","runCode","code","workspaceToCode","console","log","addChangeListener","children","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","__html","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly/core';\nimport './index.css';\nimport { blocks } from '../blockly/blocks/text'; // Import your blocks\nimport { forBlock } from '../blockly/generators/javascript';\nimport { javascriptGenerator } from 'blockly/javascript';\nimport { save, load } from '../blockly/serialization';\nimport { toolbox } from '../blockly/toolbox';\n\nconst toolboxXML = `\n  <xml id=\"toolbox\" style=\"display: none\">\n    <block type=\"add_text\"></block>\n    <!-- Add other custom blocks to the toolbox as needed -->\n  </xml>\n`;\n\nconst BlocklyComponent: React.FC = () => {\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.defineBlocksWithJsonArray(blocks); // Use your blocks array\n    Object.assign(javascriptGenerator.forBlock, forBlock);\n\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolboxXML,\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = javascriptGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      // Add your code execution logic here\n    };\n\n    // Load the initial state from storage and run the code.\n    load(workspace);\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n\n  return (\n    <div>\n      <div id=\"blocklyDiv\" style={{ height: '480px', width: '600px' }}></div>\n      <div dangerouslySetInnerHTML={{ __html: toolboxXML }} />\n      <div id=\"generatedCode\"></div>\n      <div id=\"output\"></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,OAAO,aAAa;AACpB,SAASC,MAAM,QAAQ,wBAAwB,CAAC,CAAC;AACjD,SAASC,QAAQ,QAAQ,kCAAkC;AAC3D,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAAeC,IAAI,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGtD,MAAMC,UAAU,GAAI;AACpB;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvCV,SAAS,CAAC,MAAM;IACd;IACAC,OAAO,CAACU,yBAAyB,CAACT,MAAM,CAAC,CAAC,CAAC;IAC3CU,MAAM,CAACC,MAAM,CAACT,mBAAmB,CAACD,QAAQ,EAAEA,QAAQ,CAAC;IAErD,MAAMW,SAAS,GAAGb,OAAO,CAACc,MAAM,CAAC,YAAY,EAAE;MAC7CC,OAAO,EAAER;IACX,CAAC,CAAC;;IAEF;IACA;IACA;IACA,MAAMS,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,IAAI,GAAGd,mBAAmB,CAACe,eAAe,CAACL,SAAS,CAAC;MAC3DM,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;;MAEjB;IACF,CAAC;;IAED;IACAb,IAAI,CAACS,SAAS,CAAC;IACfG,OAAO,CAAC,CAAC;;IAET;IACAH,SAAS,CAACQ,iBAAiB,CAAC,MAAM;MAChCL,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAKiB,EAAE,EAAC,YAAY;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvExB,OAAA;MAAKyB,uBAAuB,EAAE;QAAEC,MAAM,EAAEzB;MAAW;IAAE;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxDxB,OAAA;MAAKiB,EAAE,EAAC;IAAe;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9BxB,OAAA;MAAKiB,EAAE,EAAC;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACrB,EAAA,CAtCID,gBAA0B;AAAAyB,EAAA,GAA1BzB,gBAA0B;AAwChC,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}