{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/ConnectBluetooth.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ConnectBluetooth() {\n  _s();\n  const [bluetoothDevice, setBluetoothDevice] = useState(null);\n  const [characteristic, setChaacteristic] = useState(null);\n  const [outputText, setOutputText] = useState('');\n  const handleConnect = async () => {\n    try {\n      var _device$gatt;\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: ['00001101-0000-1000-8000-00805f9b34fb']\n        }]\n      });\n      console.log('Connected to:', device.name);\n      const server = await ((_device$gatt = device.gatt) === null || _device$gatt === void 0 ? void 0 : _device$gatt.connect());\n      console.log('Connected to GATT server');\n      const service = await (server === null || server === void 0 ? void 0 : server.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb'));\n      console.log('Service discovered');\n      const char = await (service === null || service === void 0 ? void 0 : service.getCharacteristic('00001101-0000-1000-8000-00805f9b34fb'));\n      console.log('Characteristic discovered');\n      if (char) {\n        // Enable notifications for the characteristic to receive data\n        await char.startNotifications();\n\n        // Listen for data notifications\n        char.addEventListener('characteristicvaluechanged', event => {\n          var _event$target;\n          const value = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n            setOutputText(prevOutput => prevOutput + decodedValue);\n          }\n        });\n        setCharacteristic(char);\n        setBluetoothDevice(device);\n      } else {\n        // Handle the case when the characteristic is not found\n        setCharacteristic(null);\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n  };\n  const handleDisconnect = async () => {\n    var _bluetoothDevice$gatt;\n    if (bluetoothDevice && (_bluetoothDevice$gatt = bluetoothDevice.gatt) !== null && _bluetoothDevice$gatt !== void 0 && _bluetoothDevice$gatt.connected) {\n      var _bluetoothDevice$gatt2;\n      await ((_bluetoothDevice$gatt2 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt2 === void 0 ? void 0 : _bluetoothDevice$gatt2.disconnect());\n      console.log('Disconnected');\n    }\n    setBluetoothDevice(null);\n    setOutputText('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"ESP32 Bluetooth Communication\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConnect,\n      disabled: bluetoothDevice !== null,\n      children: \"Connect to ESP32\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDisconnect,\n      disabled: !bluetoothDevice,\n      children: \"Disconnect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\",\n      children: outputText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n}\n_s(ConnectBluetooth, \"79svnfjJHRe0WpjHjdtlq0PH71Q=\");\n_c = ConnectBluetooth;\nexport default ConnectBluetooth;\nvar _c;\n$RefreshReg$(_c, \"ConnectBluetooth\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ConnectBluetooth","_s","bluetoothDevice","setBluetoothDevice","characteristic","setChaacteristic","outputText","setOutputText","handleConnect","_device$gatt","device","navigator","bluetooth","requestDevice","filters","services","console","log","name","server","gatt","connect","service","getPrimaryService","char","getCharacteristic","startNotifications","addEventListener","event","_event$target","value","target","textDecoder","TextDecoder","decodedValue","decode","prevOutput","setCharacteristic","error","handleDisconnect","_bluetoothDevice$gatt","connected","_bluetoothDevice$gatt2","disconnect","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","id","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/ConnectBluetooth.tsx"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction ConnectBluetooth() {\n  const [bluetoothDevice, setBluetoothDevice] = useState<BluetoothDevice | null>(null);\n  const [characteristic, setChaacteristic] = useState<BluetoothRemoteGATTCharacteristic | null>(null);\n  const [outputText, setOutputText] = useState<string>('');\n\n  const handleConnect = async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: ['00001101-0000-1000-8000-00805f9b34fb'] }],\n      });\n\n      console.log('Connected to:', device.name);\n\n      const server = await device.gatt?.connect();\n      console.log('Connected to GATT server');\n\n      const service = await server?.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb');\n      console.log('Service discovered');\n\n      const char = await service?.getCharacteristic('00001101-0000-1000-8000-00805f9b34fb');\n      console.log('Characteristic discovered');\n\n      if (char) {\n        // Enable notifications for the characteristic to receive data\n        await char.startNotifications();\n\n        // Listen for data notifications\n        char.addEventListener('characteristicvaluechanged', (event) => {\n          const value = (event.target as BluetoothRemoteGATTCharacteristic)?.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n            setOutputText((prevOutput) => prevOutput + decodedValue);\n          }\n        });\n\n        setCharacteristic(char);\n        setBluetoothDevice(device);\n      } else {\n        // Handle the case when the characteristic is not found\n        setCharacteristic(null);\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n  };\n\n  const handleDisconnect = async () => {\n    if (bluetoothDevice && bluetoothDevice.gatt?.connected) {\n      await bluetoothDevice.gatt?.disconnect();\n      console.log('Disconnected');\n    }\n\n    setBluetoothDevice(null);\n    setOutputText('');\n  };\n\n  return (\n    <div>\n      <h1>ESP32 Bluetooth Communication</h1>\n      <button onClick={handleConnect} disabled={bluetoothDevice !== null}>\n        Connect to ESP32\n      </button>\n      <button onClick={handleDisconnect} disabled={!bluetoothDevice}>\n        Disconnect\n      </button>\n      <div id=\"output\">{outputText}</div>\n    </div>\n  );\n}\n\nexport default ConnectBluetooth;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}