{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport * as Blockly from 'blockly/core';\nimport { blocks } from '../blockly/blocks/json';\nimport { jsonGenerator } from '../blockly/generators/json';\nimport { toolbox } from '../blockly/toolbox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BlocklyComponent = () => {\n  _s();\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(blocks); // Use your blocks array\n    Object.assign(jsonGenerator.forBlockly, jsonGenerator.forBlockly); // Use your generator object\n    console.log(blocks);\n    const workspace = Blockly.inject('blocklyDiv', {\n      toolbox: toolbox\n    });\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = jsonGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyDiv\",\n      style: {\n        height: '480px',\n        width: '600px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"blocklyToolboxDiv\",\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"generatedCode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(BlocklyComponent, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = BlocklyComponent;\nexport default BlocklyComponent;\nvar _c;\n$RefreshReg$(_c, \"BlocklyComponent\");","map":{"version":3,"names":["React","useEffect","Blockly","blocks","jsonGenerator","toolbox","jsxDEV","_jsxDEV","BlocklyComponent","_s","common","defineBlocks","Object","assign","forBlockly","console","log","workspace","inject","runCode","code","workspaceToCode","addChangeListener","children","id","style","height","width","fileName","_jsxFileName","lineNumber","columnNumber","display","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/components/Blockly.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport * as Blockly from 'blockly/core';\nimport { blocks } from '../blockly/blocks/json';\nimport { jsonGenerator } from '../blockly/generators/json';\nimport { toolbox } from '../blockly/toolbox';\nimport { json } from 'node:stream/consumers';\n\nconst BlocklyComponent: React.FC = () => {\n  useEffect(() => {\n    // Register the custom blocks and generator\n    Blockly.common.defineBlocks(blocks); // Use your blocks array\n    Object.assign(jsonGenerator.forBlockly, jsonGenerator.forBlockly); // Use your generator object\n    console.log(blocks);\n\n    const workspace = Blockly.inject('blocklyDiv', {toolbox: toolbox});\n\n    // This function resets the code and output divs, shows the\n    // generated code from the workspace, and evals the code.\n    // In a real application, you probably shouldn't use `eval`.\n    const runCode = () => {\n      const code = jsonGenerator.workspaceToCode(workspace);\n      console.log(code);\n\n      // Add your code execution logic here\n    };\n\n    runCode();\n\n    // Whenever the workspace changes meaningfully, run the code again.\n    workspace.addChangeListener(() => {\n      runCode();\n    });\n  }, []);\n\n  return (\n    <div>\n      <div id=\"blocklyDiv\" style={{ height: '480px', width: '600px' }}></div>\n      <div id=\"blocklyToolboxDiv\" style={{ display: 'none' }}></div>\n      <div id=\"generatedCode\"></div>\n      <div id=\"output\"></div>\n    </div>\n  );\n};\n\nexport default BlocklyComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAO,KAAKC,OAAO,MAAM,cAAc;AACvC,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,aAAa,QAAQ,4BAA4B;AAC1D,SAASC,OAAO,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG7C,MAAMC,gBAA0B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvCR,SAAS,CAAC,MAAM;IACd;IACAC,OAAO,CAACQ,MAAM,CAACC,YAAY,CAACR,MAAM,CAAC,CAAC,CAAC;IACrCS,MAAM,CAACC,MAAM,CAACT,aAAa,CAACU,UAAU,EAAEV,aAAa,CAACU,UAAU,CAAC,CAAC,CAAC;IACnEC,OAAO,CAACC,GAAG,CAACb,MAAM,CAAC;IAEnB,MAAMc,SAAS,GAAGf,OAAO,CAACgB,MAAM,CAAC,YAAY,EAAE;MAACb,OAAO,EAAEA;IAAO,CAAC,CAAC;;IAElE;IACA;IACA;IACA,MAAMc,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,IAAI,GAAGhB,aAAa,CAACiB,eAAe,CAACJ,SAAS,CAAC;MACrDF,OAAO,CAACC,GAAG,CAACI,IAAI,CAAC;;MAEjB;IACF,CAAC;;IAEDD,OAAO,CAAC,CAAC;;IAET;IACAF,SAAS,CAACK,iBAAiB,CAAC,MAAM;MAChCH,OAAO,CAAC,CAAC;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAKiB,EAAE,EAAC,YAAY;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE,OAAO;QAAEC,KAAK,EAAE;MAAQ;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACvExB,OAAA;MAAKiB,EAAE,EAAC,mBAAmB;MAACC,KAAK,EAAE;QAAEO,OAAO,EAAE;MAAO;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9DxB,OAAA;MAAKiB,EAAE,EAAC;IAAe;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAC9BxB,OAAA;MAAKiB,EAAE,EAAC;IAAQ;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpB,CAAC;AAEV,CAAC;AAACtB,EAAA,CAnCID,gBAA0B;AAAAyB,EAAA,GAA1BzB,gBAA0B;AAqChC,eAAeA,gBAAgB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}