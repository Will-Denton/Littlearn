{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/BluetoothContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BluetoothContext = /*#__PURE__*/createContext(undefined);\nexport const BluetoothProvider = ({\n  children\n}) => {\n  _s();\n  const [bluetoothDevice, setBluetoothDevice] = useState(null);\n  const [outputText, setOutputText] = useState('');\n  const connectToDevice = useCallback(async () => {\n    try {\n      var _device$gatt, _server$getPrimarySer, _server$getPrimarySer2;\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: ['00001101-0000-1000-8000-00805f9b34fb']\n        }]\n      });\n      console.log('Connected to:', device.name);\n      const server = await ((_device$gatt = device.gatt) === null || _device$gatt === void 0 ? void 0 : _device$gatt.connect());\n      console.log('Connected to GATT server');\n      const receiveChar = await (server === null || server === void 0 ? void 0 : (_server$getPrimarySer = server.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb')) === null || _server$getPrimarySer === void 0 ? void 0 : _server$getPrimarySer.getCharacteristic('00001102-0000-1000-8000-00805f9b34fc'));\n      const sendChar = await (server === null || server === void 0 ? void 0 : (_server$getPrimarySer2 = server.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb')) === null || _server$getPrimarySer2 === void 0 ? void 0 : _server$getPrimarySer2.getCharacteristic('00001103-0000-1000-8000-00805f9b34fd'));\n      if (receiveChar && sendChar) {\n        console.log('Found characteristics for receive and send');\n        // Enable notifications for the receive characteristic to receive data\n        await receiveChar.startNotifications();\n\n        // Listen for data notifications\n        receiveChar.addEventListener('characteristicvaluechanged', event => {\n          var _event$target;\n          const value = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n            setOutputText(prevOutput => prevOutput + decodedValue);\n          }\n        });\n        setBluetoothDevice(device);\n      } else {\n        // Handle the case when the characteristics are not found\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n  }, []);\n  const disconnectDevice = useCallback(async () => {\n    var _bluetoothDevice$gatt;\n    if (bluetoothDevice && (_bluetoothDevice$gatt = bluetoothDevice.gatt) !== null && _bluetoothDevice$gatt !== void 0 && _bluetoothDevice$gatt.connected) {\n      var _bluetoothDevice$gatt2;\n      (_bluetoothDevice$gatt2 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt2 === void 0 ? void 0 : _bluetoothDevice$gatt2.disconnect();\n      console.log('Disconnected');\n    }\n    setBluetoothDevice(null);\n    setOutputText('');\n  }, [bluetoothDevice]);\n  const sendBluetoothData = useCallback(async data => {\n    if (bluetoothDevice) {\n      var _bluetoothDevice$gatt3, _bluetoothDevice$gatt4;\n      const textEncoder = new TextEncoder('utf-8');\n      const encodedData = textEncoder.encode(data);\n      const sendChar = await ((_bluetoothDevice$gatt3 = bluetoothDevice.gatt) === null || _bluetoothDevice$gatt3 === void 0 ? void 0 : (_bluetoothDevice$gatt4 = _bluetoothDevice$gatt3.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb')) === null || _bluetoothDevice$gatt4 === void 0 ? void 0 : _bluetoothDevice$gatt4.getCharacteristic('00001103-0000-1000-8000-00805f9b34fd'));\n      if (sendChar) {\n        await sendChar.writeValue(encodedData);\n      }\n    }\n  }, [bluetoothDevice]);\n  return /*#__PURE__*/_jsxDEV(BluetoothContext.Provider, {\n    value: {\n      bluetoothDevice,\n      outputText,\n      connectToDevice,\n      disconnectDevice,\n      sendBluetoothData\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(BluetoothProvider, \"WJu0N9KR3Mx40GnnPbCKGnOBCTg=\");\n_c = BluetoothProvider;\nexport const useBluetooth = () => {\n  _s2();\n  const context = useContext(BluetoothContext);\n  if (context === undefined) {\n    throw new Error('useBluetooth must be used within a BluetoothProvider');\n  }\n  return context;\n};\n_s2(useBluetooth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"BluetoothProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","jsxDEV","_jsxDEV","BluetoothContext","undefined","BluetoothProvider","children","_s","bluetoothDevice","setBluetoothDevice","outputText","setOutputText","connectToDevice","_device$gatt","_server$getPrimarySer","_server$getPrimarySer2","device","navigator","bluetooth","requestDevice","filters","services","console","log","name","server","gatt","connect","receiveChar","getPrimaryService","getCharacteristic","sendChar","startNotifications","addEventListener","event","_event$target","value","target","textDecoder","TextDecoder","decodedValue","decode","prevOutput","error","disconnectDevice","_bluetoothDevice$gatt","connected","_bluetoothDevice$gatt2","disconnect","sendBluetoothData","data","_bluetoothDevice$gatt3","_bluetoothDevice$gatt4","textEncoder","TextEncoder","encodedData","encode","writeValue","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useBluetooth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/BluetoothContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, ReactNode } from 'react';\n\ninterface BluetoothContextProps {\n  bluetoothDevice: BluetoothDevice | null;\n  outputText: string;\n  connectToDevice: () => Promise<void>;\n  disconnectDevice: () => Promise<void>;\n  sendBluetoothData: (data: string) => Promise<void>;\n}\n\nconst BluetoothContext = createContext<BluetoothContextProps | undefined>(undefined);\n\ninterface BluetoothProviderProps {\n  children: ReactNode;\n}\n\nexport const BluetoothProvider: React.FC<BluetoothProviderProps> = ({ children }) => {\n  const [bluetoothDevice, setBluetoothDevice] = useState<BluetoothDevice | null>(null);\n  const [outputText, setOutputText] = useState<string>('');\n\n  const connectToDevice = useCallback(async () => {\n    try {\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{ services: ['00001101-0000-1000-8000-00805f9b34fb'] }],\n      });\n\n      console.log('Connected to:', device.name);\n\n      const server = await device.gatt?.connect();\n      console.log('Connected to GATT server');\n\n      const receiveChar = await server?.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb')?.getCharacteristic('00001102-0000-1000-8000-00805f9b34fc');\n      const sendChar = await server?.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb')?.getCharacteristic('00001103-0000-1000-8000-00805f9b34fd');\n\n      if (receiveChar && sendChar) {\n        console.log('Found characteristics for receive and send');\n        // Enable notifications for the receive characteristic to receive data\n        await receiveChar.startNotifications();\n\n        // Listen for data notifications\n        receiveChar.addEventListener('characteristicvaluechanged', (event: any) => {\n          const value = event.target?.value;\n          if (value) {\n            const textDecoder = new TextDecoder('utf-8');\n            const decodedValue = textDecoder.decode(value);\n            setOutputText((prevOutput) => prevOutput + decodedValue);\n          }\n        });\n\n        setBluetoothDevice(device);\n      } else {\n        // Handle the case when the characteristics are not found\n        setBluetoothDevice(null);\n      }\n    } catch (error) {\n      console.error('Bluetooth error:', error);\n    }\n  }, []);\n\n  const disconnectDevice = useCallback(async () => {\n    if (bluetoothDevice && bluetoothDevice.gatt?.connected) {\n      bluetoothDevice.gatt?.disconnect();\n      console.log('Disconnected');\n    }\n    setBluetoothDevice(null);\n    setOutputText('');\n  }, [bluetoothDevice]);\n\n  const sendBluetoothData = useCallback(\n    async (data: string) => {\n      if (bluetoothDevice) {\n        const textEncoder = new TextEncoder('utf-8');\n        const encodedData = textEncoder.encode(data);\n        const sendChar = await bluetoothDevice.gatt\n          ?.getPrimaryService('00001101-0000-1000-8000-00805f9b34fb')\n          ?.getCharacteristic('00001103-0000-1000-8000-00805f9b34fd');\n\n        if (sendChar) {\n          await sendChar.writeValue(encodedData);\n        }\n      }\n    },\n    [bluetoothDevice]\n  );\n\n  return (\n    <BluetoothContext.Provider\n      value={{\n        bluetoothDevice,\n        outputText,\n        connectToDevice,\n        disconnectDevice,\n        sendBluetoothData,\n      }}\n    >\n      {children}\n    </BluetoothContext.Provider>\n  );\n};\n\nexport const useBluetooth = (): BluetoothContextProps => {\n  const context = useContext(BluetoothContext);\n  if (context === undefined) {\n    throw new Error('useBluetooth must be used within a BluetoothProvider');\n  }\n  return context;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}