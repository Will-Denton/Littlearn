{"ast":null,"code":"var _jsxFileName = \"/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/SendScript.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useBluetooth } from './BluetoothContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SendScript({\n  script\n}) {\n  _s();\n  const {\n    bluetoothDevice,\n    outputText,\n    connectToDevice,\n    disconnectDevice,\n    sendBluetoothData\n  } = useBluetooth();\n  useEffect(() => {\n    const handleSendData = async () => {\n      try {\n        if (script) {\n          await sendBluetoothData(script);\n        }\n      } catch (error) {\n        console.error('Error sending data to Bluetooth device:', error);\n      }\n    };\n    handleSendData(); // You can call this function when the component mounts or as needed.\n\n    // Make sure to clean up any resources if necessary when the component unmounts.\n    return () => {\n      // Cleanup code here if needed.\n    };\n  }, [script, sendBluetoothData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Your component JSX here\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 12\n  }, this);\n}\n_s(SendScript, \"AGUOGczqrNgtIgmDaWbdzWT/8WA=\", false, function () {\n  return [useBluetooth];\n});\n_c = SendScript;\nexport default SendScript;\nvar _c;\n$RefreshReg$(_c, \"SendScript\");","map":{"version":3,"names":["React","useEffect","useBluetooth","jsxDEV","_jsxDEV","SendScript","script","_s","bluetoothDevice","outputText","connectToDevice","disconnectDevice","sendBluetoothData","handleSendData","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/michaelbryant/Desktop/Littlearn/littlearn-web/src/SendScript.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useBluetooth } from './BluetoothContext';\n\nfunction SendScript({ script }) {\n    const { bluetoothDevice, outputText, connectToDevice, disconnectDevice, sendBluetoothData } = useBluetooth();\n\n    useEffect(() => {\n        const handleSendData = async () => {\n            try {\n                if (script) {\n                    await sendBluetoothData(script);\n                }\n            } catch (error) {\n                console.error('Error sending data to Bluetooth device:', error);\n            }\n        };\n\n        handleSendData(); // You can call this function when the component mounts or as needed.\n\n        // Make sure to clean up any resources if necessary when the component unmounts.\n        return () => {\n            // Cleanup code here if needed.\n        };\n    }, [script, sendBluetoothData]);\n\n    return <div>Your component JSX here</div>;\n}\n\nexport default SendScript;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,YAAY,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,SAASC,UAAUA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC5B,MAAM;IAAEC,eAAe;IAAEC,UAAU;IAAEC,eAAe;IAAEC,gBAAgB;IAAEC;EAAkB,CAAC,GAAGV,YAAY,CAAC,CAAC;EAE5GD,SAAS,CAAC,MAAM;IACZ,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,IAAIP,MAAM,EAAE;UACR,MAAMM,iBAAiB,CAACN,MAAM,CAAC;QACnC;MACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;MACnE;IACJ,CAAC;IAEDD,cAAc,CAAC,CAAC,CAAC,CAAC;;IAElB;IACA,OAAO,MAAM;MACT;IAAA,CACH;EACL,CAAC,EAAE,CAACP,MAAM,EAAEM,iBAAiB,CAAC,CAAC;EAE/B,oBAAOR,OAAA;IAAAY,QAAA,EAAK;EAAuB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;AAC7C;AAACb,EAAA,CAvBQF,UAAU;EAAA,QAC+EH,YAAY;AAAA;AAAAmB,EAAA,GADrGhB,UAAU;AAyBnB,eAAeA,UAAU;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}